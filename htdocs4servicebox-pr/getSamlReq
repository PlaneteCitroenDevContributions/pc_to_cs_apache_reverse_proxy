#! /bin/bash

# -*- mode: shell-script -*-

if [[ -r "${0}.env.secret" ]]
then
    source "${0}.env.secret"
fi

: ${TRACE_DIR:="/var/pc_debug/$( basename "$0" )_$$"}
if [[ ! -d "${TRACE_DIR}" ]]
then
    mkdir -p "${TRACE_DIR}"
fi

if [[ -n "${DO_NO_REDIRECT_STDERR}" ]]
then
    _redirect_stderr=false
else
    _redirect_stderr=true
fi

if ${_redirect_stderr}
then
    exec 2>"${TRACE_DIR}/stderr.log"
fi


trace ()
{
    echo "$@" | while read -r line
    do
       echo '===> '"${line}" 1>&2
    done
}

trace '=============================================================================='
trace "$( date )"
trace "$( env )"
trace '=============================================================================='

HERE=$( dirname "$0" )

urlencode() {
    # urlencode <string>

    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:$i:1}"
        case $c in
            [a-zA-Z0-9.~_-])
		printf '%s' "$c"
		;;
            *)
		printf '%%%02X' "'$c"
		;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

getHeaderValueFor ()
{
    header_regexpr_pattern="$1"

    line_containing_header=$(
	grep \
	    --ignore-case \
	    --regexp="${header_regexpr_pattern}:"
			 )

    header_value=$(
	echo "${line_containing_header}" | \
	    sed -n -e 's/[^:]*:[ \t]*\(.*\)$/\1/p'
		)

    echo "${header_value}"
}


#
# global definitions
#

: ${PUBLIC_SERVICE_BOX_ROOT_URL:='https://public.servicebox-parts.com/'}

if [[ -z "${HTTP_USER_AGENT}" ]]
then
    USERAGENT='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0'
else
    USERAGENT="${HTTP_USER_AGENT}"
fi

#
# Start to get all params whith the aim to login in
# =================================================
#

# Retrieve credentials for file share with the Cloud


: ${CREDENTIAL_FILE:="${HERE}/cs_credential.txt"}

credential_file_effective_content=$(
    sed -e '/^[ \t]*#/d' "${CREDENTIAL_FILE}"
)

cs_login=$(
    grep 'cs_login' <<< "${credential_file_effective_content}" | cut -d '=' -f 2 | tr -d ' '
)

cs_password=$(
    grep 'cs_password' <<< "${credential_file_effective_content}" | cut -d '=' -f 2 | tr -d ' '
	   )

#
# get SAML Auth
# -------------
#

# get JSESSIONID PSACOUNTRY & BIGIPSERVER cookies

_old_IFS="${IFS}"
IFS=';, ';
for i in ${HTTP_COOKIE}
do
    case "${i}" in
	JSESSIONID\=* )
	    SET_JSESSIONID="${i}"
	    ;;
	PSACountry\=* )
	    SET_PSA_COUNTRY="${i}"
	    ;;

	 BIGipServer* )
	    SET_BIGIPSERVER="${i}"
	    ;;

	* )
	    ;;
    esac
done
IFS="${_old_IFS}"

trace "Has SET_JSESSIONID: ${SET_JSESSIONID}"
trace "Has SET_PSA_COUNTRY: ${SET_PSA_COUNTRY}"
trace "Has SET_BIGIPSERVER: ${SET_BIGIPSERVER}"


HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		-X POST \
		--cookie "${SET_BIGIPSERVER}" \
		--cookie "${SET_PSA_COUNTRY}" \
 		--cookie "${SET_JSESSIONID}" \
 		-d '' \
 		"${PUBLIC_SERVICE_BOX_ROOT_URL}/getSamlReq" \
		| \
		sed -e 's/\r$//'
	)

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_getSamlReq_response.txt"

GIGYAURL=$( echo "${HTTP_REQ}" | getHeaderValueFor 'gigyaUrl' )

APIKEY=$( echo "${GIGYAURL}" | sed -n -e 's|.*/v2.0/\([^/]*\)/.*$|\1|p' )

SAMLREQUEST=$( echo "${HTTP_REQ}" | getHeaderValueFor 'SAMLRequest' )
SAMLREQUEST_ENCODED=$( urlencode "${SAMLREQUEST}" )

SAMLLOGOUTREQUEST=$( echo "${HTTP_REQ}" | getHeaderValueFor 'SAMLLogoutRequest' )

trace "My GIGYAURL: ${GIGYAURL}"
trace "My APIKEY: ${APIKEY}"
trace "My SAMLREQUEST: ${SAMLREQUEST}"
trace "My SAMLREQUEST_ENCODED: ${SAMLREQUEST_ENCODED}"

#
# call GIGYAURL
# =============
#

# FIXME: is --location needed???

HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		-X GET \
		--location \
		"${GIGYAURL}"'?SAMLRequest='"${SAMLREQUEST_ENCODED}" \
		| \
		sed -e 's/\r$//'
	)

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_GIGYAURL_followed_response.txt"

_locationHeader=$( echo "${HTTP_REQ}" | getHeaderValueFor 'location' )
SAMLCONTEXT=$( echo "${_locationHeader}" | sed -n -e 's/.*&samlContext=\([^&]*\).*/\1/p' )

trace "My SAMLCONTEXT: ${SAMLCONTEXT}"


#
# call https://login-ra.fiat.com/accounts.webSdkBootstrap
# =======================================================
#

HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		-X GET 'https://login-ra.fiat.com/accounts.webSdkBootstrap?apiKey='"${APIKEY}"'&pageURL='"${GIGYAURL}"'?SAMLRequest='"${SAMLREQUEST}"'&sdk=js_latest&sdkBuild=16506&format=json' \
		| \
		sed -e 's/\r$//'
	)

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_webSdkBootstrap_response.txt"

GMID=$(echo "${HTTP_REQ}" | sed -n -e '/^[sS]et-[cC]ookie:.*gmid=/s/[^=]*=\([^;]*\);.*$/\1/p')
UCID=$(echo "${HTTP_REQ}" | sed -n -e '/^[sS]et-[cC]ookie:.*ucid=/s/[^=]*=\([^;]*\);.*$/\1/p')
HASGMID=$(echo "${HTTP_REQ}" | sed -n -e '/^[sS]et-[cC]ookie:.*has[gG]mid=/s/[^=]*=\([^;]*\);.*$/\1/p')

trace "My GMID: $GMID"
trace "My UCID: $UCID"
trace "My HASGMID: $HASGMID"

#
# call https://login-ra.fiat.com/accounts.webSdkBootstrap
# =======================================================
#

RISKCONTEXT=$( urlencode '{"b0":53295,"b1":[104,68,180,220],"b2":6,"b3":[],"b4":6,"b5":1,"b6":"'"${USERAGENT}"'","b7":[],"b8":"'"${TIME}"':00","b9":-120,"b10":{"state":"prompt"},"b11":false,"b12":{"charging":true,"chargingTime":0,"dischargingTime":null,"level":1},"b13":[null,"1024|728|24",false,true]}' )

trace "RISKCONTEXT: ${RISKCONTEXT}"

HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		-X POST \
		-d "loginID=${cs_login}" \
		-d "password=${cs_password}" \
		-d "sessionExpiration=2628000" \
		-d "targetEnv=jssdk" \
		-d "include=profile%2Cdata%2Cemails%2Csubscriptions%2Cpreferences%2C" \
		-d "includeUserInfo=true" \
		-d "loginMode=standard" \
		-d "lang=fr" \
		-d "riskContext=${RISKCONTEXT}" \
		-d "APIKey=${APIKEY}" \
		-d "source=showScreenSet" \
		-d "sdk=js_latest" \
		-d "authMode=cookie" \
		-d "pageURL=https%3A%2F%2Flogin-ra.fiat.com%2F" \
		-d "sdkBuild=16506" \
		-d "format=json" \
		--cookie "gmid=${GMID}" \
		--cookie "ucid=${UCID}" \
		--cookie "hasGmid=${HASGMID}" \
		'https://login-ra.fiat.com/accounts.login' \
		| \
		sed -e 's/\r$//'
	)

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_accounts_login_response.txt"

GLT=$(echo "${HTTP_REQ}" | sed -n -e '/^[sS]et-[cC]ookie:.*glt_/s/.*\(glt_[^;]*\);.*/\1/p')
LOGIN_TOKEN=$(echo "${GLT}" | sed -n -e 's/[^=]*=//p')

trace "My GLT: $GLT"
trace "My LOGIN_TOKEN: $LOGIN_TOKEN"

#
# call https://login-ra.fiat.com/saml/v2.0/.../continue
# =====================================================
#

HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		--cookie "gmid=${GMID}" \
		--cookie "ucid=${UCID}" \
		--cookie "hasGmid=${HASGMID}" \
		-X GET "https://login-ra.fiat.com/saml/v2.0/${APIKEY}/idp/sso/continue?samlContext=${SAMLCONTEXT}&loginToken=${LOGIN_TOKEN}" \
	    	| \
		sed -e 's/\r$//'
	)

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_continue_response.txt"

SAMLRESPONSE=$(echo "${HTTP_REQ}" | sed -n -e '/name="SAMLResponse"/s/.*name="SAMLResponse"[ \t]*value="\([^"]*\)".*/\1/p' )
SERVICEBOX_URL=$(echo "${HTTP_REQ}" | sed -n -e '/name="SAMLResponse"/s/.*id="selfForm"[ \t]*method="post"[ \t]*action="\([^"]*\)".*/\1/p' )
SAMLRESPONSE_ENCODED=$(urlencode "${SAMLRESPONSE}")

trace "My SAMLRESPONSE: ${SAMLRESPONSE}"
trace "My SERVICEBOX_URL: ${SERVICEBOX_URL}"

#
# final call to SERVICEBOX_URL
# ============================
#


HTTP_REQ=$( curl \
		-s \
		-D - \
		-A "${USERAGENT}" \
		-X POST \
		-d "SAMLResponse=${SAMLRESPONSE_ENCODED}" \
		--cookie "${SET_BIGIPSERVER}" \
		--cookie "${SET_PSA_COUNTRY}" \
 		--cookie "${SET_JSESSIONID}" \
		"${SERVICEBOX_URL}" \
	    	| \
		sed -e 's/\r$//'
	    )

echo "${HTTP_REQ}" > "${TRACE_DIR}/HTTP_REQ_servicebox_url_response.txt"

USERID=$( echo "${HTTP_REQ}" | getHeaderValueFor 'userId' )
SESSIONID=$( echo "${HTTP_REQ}" | getHeaderValueFor 'sessionId' )

#
# generate response
# =================
#

if [[ "${LOGIN_TOKEN}" == "" ]]
then

    #
    # build and error content
    # not yet implemented
    #

    echo 'Status: 500 Internal Server Error'
    echo
    
    trace 'Return code 500'
    exit 0
else

    echo 'SAMLRequest: '"${SAMLREQUEST}"
    echo 'SAMLLogoutRequest: '"${SAMLLOGOUTREQUEST}"
    echo 'gigyaUrl: '"${GIGYAURL}"
    echo "debug_login_token: ${LOGIN_TOKEN}"
    echo 'Status: 302 Redirect'
    echo 'Location: /do/newApvprStart'
    echo "Set-Cookie: ${HTTP_COOKIE}"
    echo 'Cache-control: no-cache, no-store, max-age=0'
    echo 'Pragma: no-cache'
    echo 'userId: '"${USERID}"
    echo 'sessionId: '"${SESSIONID}"
    echo

    trace "Return code 302 with LoginToken: ${LOGIN_TOKEN}"
    exit 0
fi

# NOT REACHED
